<template>
  <div class="meeting-container">
    <div class="meeting-header">
      <div class="meeting-title">
        <h2>{{ meeting.title }}</h2>
        <span :class="['meeting-status', getMeetingStatusClass()]">{{ getStatusText(meeting.status) }}</span>
      </div>
      <div class="meeting-info">
        <span class="meeting-time">
          {{ meeting.startTime }} ~ {{ meeting.endTime || '进行中' }}
        </span>
        <span class="meeting-location" v-if="meeting.location">
          {{ meeting.location }}
        </span>
        <span class="meeting-department" v-if="meeting.department">
          部门: {{ meeting.department }}
        </span>
        <span class="meeting-type" v-if="meeting.type">
          类型: {{ meeting.type }}
        </span>
      </div>
      <!-- 会议操作按钮区域 -->
      <div class="meeting-actions" v-if="isCreator && isMeetingActive">
        <button @click="confirmEndMeeting" class="end-meeting-btn">结束会议</button>
      </div>
      <!-- 会议结束提示 -->
      <div v-if="!isMeetingActive" class="meeting-status-notice">
        <p>此会议{{ getStatusText(meeting.status) }}，{{ meeting.status === 'completed' || meeting.status === '3' ? '您正在查看历史记录' : '您可以查看会议信息' }}</p>
      </div>
    </div>

    <div class="meeting-content">
      <div class="tabs-container">
        <div 
          v-for="tab in tabs" 
          :key="tab.id"
          :class="['tab-item', { active: currentTab === tab.id }]"
          @click="currentTab = tab.id"
        >
          {{ tab.name }}
        </div>
      </div>

      <div class="tab-content">
        <!-- 聊天面板 -->
        <div v-if="currentTab === 'chat'" class="meeting-panel">
          <div class="panel-header">
            <h3>实时聊天</h3>
          </div>
          <div class="chat-panel">
            <div class="chat-messages" ref="chatMessages">
              <div 
                v-for="(message, index) in messages" 
                :key="index" 
                :class="['message-item', message.sender === currentUser ? 'my-message' : '', message.isSystem ? 'system-message' : '']"
              >
                <div v-if="!message.isSystem" class="message-header">
                  <div class="user-avatar">
                    {{ message.sender ? message.sender.charAt(0).toUpperCase() : 'U' }}
                  </div>
                  <div class="user-info">
                    <span class="user-name">{{ message.sender }}</span>
                    <span class="message-time">{{ message.time }}</span>
                  </div>
                </div>
                <div class="message-content">
                  {{ message.content }}
                </div>
              </div>
            </div>
            <div class="chat-input">
              <div class="input-area">
                <input 
                  v-model="newMessage" 
                  @keyup.enter="sendMessage"
                  :disabled="!isMeetingActive"
                  class="message-input"
                  placeholder="请输入消息..." 
                />
              </div>
              <button 
                @click="sendMessage" 
                class="send-btn"
                :disabled="!newMessage.trim() || !isMeetingActive"
              >
                <i class="icon-send">➤</i>
              </button>
            </div>
          </div>
        </div>

        <!-- 议题面板 -->
        <div v-if="currentTab === 'agenda'" class="meeting-panel">
          <div class="panel-header">
            <h3>会议议题</h3>
            <button 
              v-if="isCreator && meeting.status === 1" 
              @click="showAddAgendaModal = true" 
              class="add-btn"
            >添加议题</button>
          </div>
          <div class="agenda-list">
            <div v-for="item in agendaItems" :key="item.id" class="agenda-item">
              <div class="agenda-header">
                <h4>{{ item.title }}</h4>
                <div class="agenda-status">
                  <span :class="'status-badge status-' + item.status">{{ getAgendaStatusText(item.status) }}</span>
                </div>
              </div>
              <div class="agenda-info">
                <p>{{ item.description }}</p>
                <div class="agenda-details">
                  <span>负责人: {{ item.owner }}</span>
                  <span>时长: {{ item.duration }}分钟</span>
                </div>
              </div>
              <div v-if="item.subAgendas && item.subAgendas.length > 0" class="sub-agenda-list">
                <h5>子议题:</h5>
                <div v-for="subItem in item.subAgendas" :key="subItem.id" class="sub-agenda-item">
                  <div class="agenda-header">
                    <h4>{{ subItem.title }}</h4>
                    <div class="agenda-status">
                      <span :class="'status-badge status-' + subItem.status">{{ getAgendaStatusText(subItem.status) }}</span>
                    </div>
                  </div>
                  <div class="agenda-info">
                    <p>{{ subItem.description }}</p>
                    <div class="agenda-details">
                      <span>负责人: {{ subItem.owner }}</span>
                      <span>时长: {{ subItem.duration }}分钟</span>
                    </div>
                  </div>
                  <div class="agenda-actions" v-if="isCreator && meeting.status === 1">
                    <button @click="editAgenda(subItem)">编辑</button>
                    <button @click="confirmDeleteAgenda(subItem.id, item.id)" :disabled="hasRelatedFiles(subItem.id)">删除</button>
                  </div>
                </div>
              </div>
              <div class="agenda-actions" v-if="isCreator && meeting.status === 1">
                <button @click="editAgenda(item)">编辑</button>
                <button @click="addSubAgenda(item.id)" :disabled="item.subAgendas && item.subAgendas.length >= 5">添加子议题</button>
                <button @click="confirmDeleteAgenda(item.id)" :disabled="hasRelatedFiles(item.id) || (item.subAgendas && item.subAgendas.length > 0)">删除</button>
              </div>
            </div>
            <div v-if="agendaItems.length === 0" class="empty-notice">
              <text>暂无议题</text>
            </div>
          </div>
        </div>

        <!-- 文件面板 -->
        <div v-if="currentTab === 'file'" class="meeting-panel">
          <div class="panel-header">
            <h3>会议文件</h3>
            <button 
              v-if="meeting.status === 1" 
              @click="showUploadFileModal = true" 
              class="add-btn"
            >上传文件</button>
          </div>
          <div class="file-list">
            <div v-for="file in fileItems" :key="file.id" class="file-item">
              <div class="file-icon">
                <i :class="getFileIcon(file.type)"></i>
              </div>
              <div class="file-info">
                <div class="file-name">{{ file.name }}</div>
                <div class="file-meta">
                  <span>{{ formatFileSize(file.size) }}</span>
                  <span>上传时间: {{ file.uploadTime }}</span>
                  <span>上传者: {{ file.uploader }}</span>
                  <span v-if="file.agendaId">议题: {{ getAgendaTitle(file.agendaId) }}</span>
                </div>
              </div>
              <div class="file-actions">
                <button @click="previewFile(file)" :disabled="!isPdfFile(file.type)">预览</button>
                <button @click="downloadFile(file)">下载</button>
                <button 
                  v-if="meeting.status === 1"
                  @click="confirmDeleteFile(file.id)" 
                  class="delete-btn"
                >删除</button>
              </div>
            </div>
            <div v-if="fileItems.length === 0" class="empty-notice">
              <text>暂无文件</text>
            </div>
          </div>
        </div>

        <!-- 文件上传模态框 -->
        <div v-if="showUploadFileModal" class="modal">
          <div class="modal-content">
            <div class="modal-header">
              <h3>上传文件</h3>
              <span class="close-btn" @click="showUploadFileModal = false">&times;</span>
            </div>
            <div class="modal-body">
              <div class="form-group">
                <label>文件名称 <span class="required">*</span></label>
                <input type="text" v-model="uploadForm.fileName" placeholder="请输入文件名称" />
              </div>
              <div class="form-group">
                <label>文件类型</label>
                <select v-model="uploadForm.fileType">
                  <option v-for="option in uploadFileOptions" :key="option.value" :value="option.value">
                    {{ option.label }}
                  </option>
                </select>
              </div>
              <div class="form-group">
                <label>关联议题</label>
                <select v-model="uploadForm.agendaId">
                  <option value="">不关联</option>
                  <option v-for="agenda in flattenedAgendas" :key="agenda.id" :value="agenda.id">
                    {{ agenda.isSubAgenda ? '└─ ' + agenda.title : agenda.title }}
                  </option>
                </select>
              </div>
              <div class="form-group">
                <label>选择文件 <span class="required">*</span></label>
                <div class="file-upload-container">
                  <button @click="chooseFile" class="file-select-btn">选择文件</button>
                  <span v-if="uploadForm.selectedFileName">{{ uploadForm.selectedFileName }}</span>
                  <span v-else class="file-hint">支持PDF文件</span>
                </div>
              </div>
            </div>
            <div class="modal-footer">
              <button @click="showUploadFileModal = false">取消</button>
              <button @click="uploadFile" class="primary-btn" :disabled="!uploadForm.fileName || !uploadForm.filePath">上传</button>
            </div>
          </div>
        </div>
        
        <!-- PDF预览模态框 -->
        <div v-if="showPdfPreviewModal" class="modal pdf-preview-modal">
          <div class="modal-content pdf-preview-content">
            <div class="modal-header">
              <h3>{{ currentPreviewFile ? currentPreviewFile.name : '文件预览' }}</h3>
              <span class="close-btn" @click="closePdfPreview">&times;</span>
            </div>
            <div class="modal-body pdf-preview-body">
              <iframe v-if="pdfPreviewUrl" :src="pdfPreviewUrl" class="pdf-viewer"></iframe>
              <div v-else class="empty-notice">
                <text>无法预览文件</text>
              </div>
            </div>
            <div class="modal-footer">
              <button @click="closePdfPreview">关闭</button>
              <button v-if="currentPreviewFile" @click="downloadFile(currentPreviewFile)" class="primary-btn">下载</button>
            </div>
          </div>
        </div>

        <!-- 录音面板 -->
        <div v-if="currentTab === 'recording'" class="meeting-panel">
          <div class="panel-header">
            <h3>会议录音</h3>
            <div class="header-actions">
            <button 
              v-if="meeting.status === 1" 
              @click="toggleRecording" 
              :class="isRecording ? 'stop-btn' : 'record-btn'"
            >
              {{ isRecording ? '停止录音' : '开始录音' }}
            </button>
              <button 
                v-if="meeting.status === 1" 
                @click="uploadRecordingModal = true" 
                class="add-btn"
              >
                上传录音
            </button>
            </div>
          </div>
          <div class="recording-list">
            <div v-for="recording in recordingItems" :key="recording.id" class="recording-item">
              <div class="recording-info">
                <div class="recording-name">{{ recording.name }}</div>
                <div class="recording-meta">
                  <span>时长: {{ recording.duration }}</span>
                  <span>创建时间: {{ recording.createTime }}</span>
                </div>
              </div>
              <div class="recording-actions">
                <button @click="playRecording(recording)">播放</button>
                <button @click="downloadRecording(recording)">下载</button>
                <button 
                  v-if="meeting.status === 1"
                  @click="deleteRecording(recording.id)" 
                  class="delete-btn"
                >删除</button>
              </div>
            </div>
            <div v-if="recordingItems.length === 0" class="empty-notice">
              <text>暂无录音</text>
            </div>
          </div>
        </div>
        
        <!-- 上传录音模态框 -->
        <div v-if="uploadRecordingModal" class="modal">
          <div class="modal-content">
            <div class="modal-header">
              <h3>上传会议录音</h3>
              <span class="close-btn" @click="uploadRecordingModal = false">&times;</span>
            </div>
            <div class="modal-body">
              <div class="form-group">
                <label>录音名称 <span class="required">*</span></label>
                <input type="text" v-model="recordingForm.name" placeholder="请输入录音名称" />
              </div>
              <div class="form-group">
                <label>录音文件 <span class="required">*</span></label>
                <div class="file-upload-container">
                  <button @click="chooseAudioFile" class="file-select-btn">选择文件</button>
                  <span v-if="recordingForm.fileName">{{ recordingForm.fileName }}</span>
                  <span v-else class="file-hint">支持mp3, wav, aac等格式</span>
                </div>
              </div>
              <div class="form-group">
                <label>描述</label>
                <textarea v-model="recordingForm.description" placeholder="请输入录音描述"></textarea>
              </div>
            </div>
            <div class="modal-footer">
              <button @click="uploadRecordingModal = false">取消</button>
              <button @click="uploadRecordingFile" class="primary-btn" :disabled="!recordingForm.name || !recordingForm.filePath">上传</button>
            </div>
          </div>
        </div>

        <!-- 纪要面板 -->
        <div v-if="currentTab === 'summary'" class="meeting-panel">
          <div class="panel-header">
            <h3>会议纪要</h3>
            <div class="header-actions">
            <button 
              v-if="meeting.status === 1 || !meeting.summary" 
              @click="showAddMinutesModal = true" 
              class="add-btn"
            >
              {{ meeting.summary ? '编辑纪要' : '添加纪要' }}
            </button>
              <button 
                v-if="recordingItems.length > 0"
                @click="showGenerateMinutesModal = true" 
                class="generate-btn"
              >
                从录音生成纪要
              </button>
              <button 
                v-if="meeting.status === 1"
                @click="showUploadMinutesModal = true" 
                class="upload-btn"
              >
                上传纪要
            </button>
            </div>
          </div>
          <div class="summary-content" v-if="meeting.summary">
            <div class="summary-header">
              <h4>会议总结</h4>
              <div class="summary-meta">
                <span>创建者: {{ meeting.summary.creator }}</span>
                <span>创建时间: {{ meeting.summary.createTime }}</span>
                <span v-if="meeting.summary.lastModified">修改时间: {{ meeting.summary.lastModified }}</span>
              </div>
            </div>
            <div class="summary-body">
              <pre>{{ meeting.summary.content }}</pre>
            </div>
            <div class="summary-actions">
              <button @click="downloadSummary(meeting.summary)">下载纪要</button>
              <button 
                v-if="isCreator && meeting.status === 1"
                @click="showAddMinutesModal = true"
                class="edit-btn"
              >修改纪要</button>
              <button 
                v-if="isCreator && meeting.status === 1"
                @click="deleteSummary()" 
                class="delete-btn"
              >删除纪要</button>
            </div>
          </div>
          <div v-else class="empty-notice">
            <text>暂无会议纪要</text>
          </div>
        </div>

        <!-- 添加会议纪要模态框 -->
        <div v-if="showAddMinutesModal" class="modal">
          <div class="modal-content">
            <div class="modal-header">
              <h3>{{ meeting.summary ? '编辑会议纪要' : '添加会议纪要' }}</h3>
              <span class="close-btn" @click="showAddMinutesModal = false">&times;</span>
            </div>
            <div class="modal-body">
              <div class="form-group">
                <label>纪要标题 <span class="required">*</span></label>
                <input type="text" v-model="minutesForm.title" placeholder="请输入纪要标题" />
              </div>
              <div class="form-group">
                <label>关联录音</label>
                <select v-model="minutesForm.recordingId">
                  <option value="">不关联录音</option>
                  <option v-for="recording in recordingItems" :key="recording.id" :value="recording.id">
                    {{ recording.name }}
                  </option>
                </select>
              </div>
              <div class="form-group">
                <label>会议决议</label>
                <textarea v-model="minutesForm.resolutions" placeholder="请输入会议决议内容" rows="5"></textarea>
              </div>
              <div class="form-group">
                <label>下一步任务</label>
                <textarea v-model="minutesForm.nextTasks" placeholder="请输入下一步任务" rows="5"></textarea>
              </div>
            </div>
            <div class="modal-footer">
              <button @click="showAddMinutesModal = false">取消</button>
              <button @click="saveSummary" class="primary-btn">保存</button>
            </div>
          </div>
        </div>
        
        <!-- 从录音生成纪要模态框 -->
        <div v-if="showGenerateMinutesModal" class="modal">
          <div class="modal-content">
            <div class="modal-header">
              <h3>从录音生成纪要</h3>
              <span class="close-btn" @click="showGenerateMinutesModal = false">&times;</span>
            </div>
            <div class="modal-body">
              <div class="form-group">
                <label>选择录音文件 <span class="required">*</span></label>
                <select v-model="generateForm.recordingId">
                  <option value="">请选择录音</option>
                  <option v-for="recording in recordingItems" :key="recording.id" :value="recording.id">
                    {{ recording.name }}
                  </option>
                </select>
              </div>
              <div class="form-group">
                <label>纪要标题 <span class="required">*</span></label>
                <input type="text" v-model="generateForm.title" placeholder="请输入纪要标题" />
              </div>
            </div>
            <div class="modal-footer">
              <button @click="showGenerateMinutesModal = false">取消</button>
              <button @click="generateSummaryFromRecording" class="primary-btn" :disabled="!generateForm.recordingId || !generateForm.title">生成纪要</button>
            </div>
          </div>
        </div>
        
        <!-- 上传纪要文件模态框 -->
        <div v-if="showUploadMinutesModal" class="modal">
          <div class="modal-content">
            <div class="modal-header">
              <h3>上传会议纪要</h3>
              <span class="close-btn" @click="showUploadMinutesModal = false">&times;</span>
            </div>
            <div class="modal-body">
              <div class="form-group">
                <label>纪要标题 <span class="required">*</span></label>
                <input type="text" v-model="uploadMinutesForm.title" placeholder="请输入纪要标题" />
              </div>
              <div class="form-group">
                <label>纪要文件 <span class="required">*</span></label>
                <div class="file-upload-container">
                  <button @click="chooseMinutesFile" class="file-select-btn">选择文件</button>
                  <span v-if="uploadMinutesForm.fileName">{{ uploadMinutesForm.fileName }}</span>
                  <span v-else class="file-hint">支持docx, pdf, txt等格式</span>
                </div>
              </div>
            </div>
            <div class="modal-footer">
              <button @click="showUploadMinutesModal = false">取消</button>
              <button @click="uploadMinutesFile" class="primary-btn" :disabled="!uploadMinutesForm.title || !uploadMinutesForm.filePath">上传</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- 文件上传模态框 -->
    <div v-if="showUploadModal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <h3>上传文件</h3>
          <span class="close-btn" @click="showUploadModal = false">&times;</span>
        </div>
        <div class="modal-body">
          <div class="form-group">
            <label>文件名称</label>
            <input type="text" v-model="uploadForm.fileName" placeholder="请输入文件名称" />
          </div>
          <div class="form-group">
            <label>文件类型</label>
            <select v-model="uploadForm.fileType">
              <option v-for="option in uploadFileOptions" :key="option.value" :value="option.value">
                {{ option.label }}
              </option>
            </select>
          </div>
          <div class="form-group">
            <label>关联议程</label>
            <select v-model="uploadForm.agendaId">
              <option value="">不关联</option>
              <option v-for="option in uploadAgendaOptions" :key="option.value" :value="option.value">
                {{ option.label }}
              </option>
            </select>
          </div>
        </div>
        <div class="modal-footer">
          <button @click="showUploadModal = false">取消</button>
          <button @click="uploadFile" class="primary-btn">上传</button>
        </div>
      </div>
    </div>

    <!-- 添加议题模态框 -->
    <div v-if="showAddAgendaModal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <h3>{{ editingAgenda ? '编辑议题' : '添加议题' }}</h3>
          <span class="close-btn" @click="showAddAgendaModal = false">&times;</span>
        </div>
        <div class="modal-body">
          <div class="form-group">
            <label>议题标题 <span class="required">*</span></label>
            <input type="text" v-model="agendaForm.title" placeholder="请输入议题标题" />
          </div>
          <div class="form-group">
            <label>议题描述</label>
            <textarea v-model="agendaForm.description" placeholder="请输入议题描述"></textarea>
          </div>
          <div class="form-group">
            <label>负责人</label>
            <input type="text" v-model="agendaForm.owner" placeholder="请输入负责人" />
          </div>
          <div class="form-group">
            <label>时长（分钟）</label>
            <input type="number" v-model="agendaForm.duration" min="1" max="240" />
          </div>
          <div class="form-group">
            <label>状态</label>
            <select v-model="agendaForm.status">
              <option value="1">未开始</option>
              <option value="2">进行中</option>
              <option value="3">已完成</option>
              <option value="4">已取消</option>
            </select>
          </div>
          <div v-if="agendaForm.parentId" class="form-note">
            <p>正在添加子议题</p>
          </div>
        </div>
        <div class="modal-footer">
          <button @click="showAddAgendaModal = false">取消</button>
          <button @click="editingAgenda ? updateAgenda() : addAgenda()" class="primary-btn">
            {{ editingAgenda ? '保存' : '添加' }}
          </button>
        </div>
      </div>
    </div>
  </div>
</template>

<style scoped>
.meeting-container {
  width: 100%;
  height: 100vh;
  display: flex;
  flex-direction: column;
  background-color: #f8f9fa;
}

.meeting-header {
  padding: 20px;
  background: linear-gradient(135deg, #0062cc, #007bff);
  color: white;
  border-bottom: 1px solid #0062cc;
  display: flex;
  justify-content: space-between;
  align-items: center;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.meeting-info h2 {
  margin: 0;
  font-size: 24px;
  color: white;
  font-weight: 600;
}

.meeting-meta {
  margin: 8px 0 0;
  font-size: 14px;
  color: rgba(255,255,255,0.9);
}

.meeting-meta span {
  margin-right: 16px;
  display: inline-flex;
  align-items: center;
}

.status {
  padding: 4px 12px;
  border-radius: 20px;
  font-size: 12px;
  font-weight: 500;
  text-transform: uppercase;
}

.status.pending {
  background-color: rgba(255,255,255,0.2);
  color: white;
}

.status.ongoing {
  background-color: #2ecc71;
  color: white;
}

.status.completed {
  background-color: #3498db;
  color: white;
}

.status.canceled {
  background-color: #e74c3c;
  color: white;
}

.meeting-content {
  flex: 1;
  display: flex;
  height: calc(100vh - 140px);  /* 减去头部和选项卡高度 */
  overflow: hidden;
}

.tabs-container {
  display: flex;
  background: #fff;
  border-bottom: 1px solid #e9ecef;
  padding: 0 16px;
}

.tab-item {
  padding: 12px 24px;
  cursor: pointer;
  color: #666;
  border-bottom: 2px solid transparent;
  transition: all 0.3s;
}

.tab-item:hover {
  color: #007bff;
}

.tab-item.active {
  color: #007bff;
  border-bottom-color: #007bff;
}

.tab-content {
  flex: 1;
  overflow-y: auto;
  padding: 16px;
}

/* 聊天面板样式 */
.chat-panel {
  display: flex;
  flex-direction: column;
  height: 80vh;
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  overflow: hidden;
  background-color: #f9f9f9;
}

.chat-messages {
  flex: 1;
  overflow-y: auto;
  padding: 15px;
  max-height: 70vh;
  display: flex;
  flex-direction: column;
}

.message-item {
  margin-bottom: 15px;
  max-width: 80%;
  display: flex;
  flex-direction: column;
  align-self: flex-start;
}

.my-message {
  align-self: flex-end;
}

.message-header {
  display: flex;
  align-items: center;
  margin-bottom: 5px;
}

.user-avatar {
  width: 36px;
  height: 36px;
  border-radius: 50%;
  background-color: #1890ff;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: bold;
  margin-right: 10px;
}

.user-info {
  display: flex;
  flex-direction: column;
}

.user-name {
  font-weight: bold;
  font-size: 14px;
}

.message-time {
  font-size: 12px;
  color: #999;
}

.message-content {
  padding: 10px 15px;
  border-radius: 8px;
  background-color: white;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  word-break: break-word;
}

.my-message .message-content {
  background-color: #e3f2fd;
}

.system-message {
  align-self: center;
  max-width: 90%;
}

.system-message .message-content {
  background-color: #f5f5f5;
  color: #666;
  font-size: 13px;
  padding: 8px 15px;
  border-radius: 15px;
  text-align: center;
}

.chat-input {
  display: flex;
  padding: 10px;
  background-color: white;
  border-top: 1px solid #e0e0e0;
}

.input-area {
  flex: 1;
}

.message-input {
  width: 100%;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  padding: 8px 12px;
  outline: none;
  transition: all 0.3s;
}

.message-input:focus {
  border-color: #40a9ff;
  box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);
}

.send-btn {
  margin-left: 10px;
  background-color: #1890ff;
  color: white;
  border: none;
  border-radius: 4px;
  padding: 0 15px;
  height: 36px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
}

.send-btn:disabled {
  background-color: #d9d9d9;
  cursor: not-allowed;
}

.icon-send {
  font-size: 16px;
}

/* 议程面板样式 */
.agenda-panel {
  padding: 0;
}

.agenda-list {
  padding: 0;
}

.agenda-item {
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  margin-bottom: 16px;
  overflow: hidden;
}

.agenda-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 12px 16px;
  background: #f8f9fa;
  border-bottom: 1px solid #e9ecef;
}

.agenda-title {
  font-weight: bold;
  color: #333;
}

.agenda-status {
  padding: 2px 8px;
  border-radius: 10px;
  font-size: 12px;
}

.agenda-status.pending {
  background-color: #f8f9fa;
  color: #6c757d;
}

.agenda-status.ongoing {
  background-color: #e8f5e9;
  color: #2e7d32;
}

.agenda-status.completed {
  background-color: #e3f2fd;
  color: #1565c0;
}

.agenda-status.skipped {
  background-color: #ffebee;
  color: #c62828;
}

.agenda-content {
  padding: 16px;
}

.agenda-content p {
  margin: 0 0 12px;
  color: #333;
}

.agenda-meta {
  display: flex;
  color: #666;
  font-size: 12px;
}

.agenda-meta span {
  margin-right: 16px;
}

/* 文件面板样式 */
.file-panel {
  padding: 0;
}

.file-actions {
  margin-bottom: 16px;
  display: flex;
  justify-content: flex-end;
}

.file-list {
  padding: 10px;
  max-height: 300px;
  overflow-y: auto;
}

.file-item {
  display: flex;
  align-items: center;
  padding: 8px;
  margin-bottom: 8px;
  background: #f8f9fa;
  border-radius: 4px;
  transition: all 0.3s;
}

.file-item:hover {
  background: #e9ecef;
}

.file-icon {
  width: 32px;
  height: 32px;
  margin-right: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: #e9ecef;
  border-radius: 4px;
}

.file-icon.doc {
  background-color: #007bff;
  color: #fff;
}

.file-icon.pdf {
  background-color: #dc3545;
  color: #fff;
}

.file-icon.excel {
  background-color: #28a745;
  color: #fff;
}

.file-icon.ppt {
  background-color: #fd7e14;
  color: #fff;
}

.file-icon.img {
  background-color: #6610f2;
  color: #fff;
}

.file-info {
  flex: 1;
  min-width: 0;
}

.file-name {
  font-size: 14px;
  color: #333;
  margin-bottom: 4px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.file-meta {
  font-size: 12px;
  color: #666;
}

.file-actions {
  display: flex;
  gap: 8px;
}

.file-action-btn {
  padding: 4px 8px;
  font-size: 12px;
  color: #666;
  background: none;
  border: none;
  cursor: pointer;
  transition: color 0.3s;
}

.file-action-btn:hover {
  color: #007bff;
}

.file-action-btn.delete:hover {
  color: #dc3545;
}

/* 录音面板样式 */
.recording-panel {
  padding: 0;
}

.recording-actions {
  margin-bottom: 16px;
  display: flex;
  justify-content: flex-end;
}

.recording-list {
  padding: 0;
}

.recording-item {
  display: flex;
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  margin-bottom: 16px;
  padding: 16px;
  align-items: center;
}

.recording-info {
  flex: 1;
}

.recording-name {
  font-weight: bold;
  color: #333;
  margin-bottom: 4px;
}

.recording-meta {
  color: #666;
  font-size: 12px;
}

.recording-meta span {
  margin-right: 16px;
}

.recording-actions {
  display: flex;
  gap: 8px;
  margin-bottom: 0;
}

.recording-action-btn {
  padding: 4px 8px;
  font-size: 12px;
  color: #666;
  background: none;
  border: none;
  cursor: pointer;
  transition: color 0.3s;
}

.recording-action-btn:hover {
  color: #007bff;
}

.recording-action-btn.delete:hover {
  color: #dc3545;
}

/* 纪要面板样式 */
.summary-panel {
  padding: 0;
}

.summary-actions {
  margin-bottom: 16px;
  display: flex;
  justify-content: flex-end;
}

.summary-list {
  padding: 0;
}

.summary-item {
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  margin-bottom: 16px;
  overflow: hidden;
}

.summary-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 12px 16px;
  background: #f8f9fa;
  border-bottom: 1px solid #e9ecef;
}

.summary-title {
  font-weight: bold;
  color: #333;
}

.summary-time {
  color: #666;
  font-size: 12px;
}

.summary-content {
  padding: 16px;
}

.summary-section {
  margin-bottom: 16px;
}

.summary-section h4 {
  margin: 0 0 8px;
  font-size: 16px;
  color: #333;
}

.summary-section p {
  margin: 0 0 4px;
  color: #333;
}

.summary-section ul {
  margin: 0;
  padding: 0 0 0 20px;
}

.summary-section li {
  margin: 0 0 4px;
  color: #333;
}

.summary-actions {
  padding: 12px 16px;
  border-top: 1px solid #e9ecef;
  display: flex;
  justify-content: flex-end;
  gap: 8px;
  margin-bottom: 0;
}

.summary-action-btn {
  padding: 4px 8px;
  font-size: 12px;
  color: #666;
  background: none;
  border: none;
  cursor: pointer;
  transition: color 0.3s;
}

.summary-action-btn:hover {
  color: #007bff;
}

.summary-action-btn.delete:hover {
  color: #dc3545;
}

/* 按钮样式 */
.btn {
  padding: 8px 16px;
  border-radius: 4px;
  border: none;
  cursor: pointer;
  font-size: 14px;
  transition: all 0.3s;
}

.btn-primary {
  background: #007bff;
  color: #fff;
}

.btn-primary:hover {
  background: #0069d9;
}

.btn-secondary {
  background: #6c757d;
  color: #fff;
}

.btn-secondary:hover {
  background: #5a6268;
}

.btn-danger {
  background: #dc3545;
  color: #fff;
}

.btn-danger:hover {
  background: #c82333;
}

/* 模态框样式 */
.modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0,0,0,0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.modal-content {
  width: 90%;
  max-width: 500px;
  background: #fff;
  border-radius: 8px;
  padding: 20px;
  box-shadow: 0 4px 6px rgba(0,0,0,0.1);
  position: relative;
  z-index: 1001;
}

.modal-content h3 {
  margin: 0 0 20px;
  font-size: 18px;
  color: #333;
}

.form-group {
  margin-bottom: 16px;
}

.form-group label {
  display: block;
  margin-bottom: 8px;
  font-size: 14px;
  color: #333;
}

.form-group input,
.form-group select,
.form-group textarea {
  width: 100%;
  padding: 8px 12px;
  border: 1px solid #ced4da;
  border-radius: 4px;
  font-size: 14px;
  color: #333;
}

.form-group textarea {
  height: 100px;
  resize: vertical;
}

.modal-actions {
  display: flex;
  justify-content: flex-end;
  gap: 12px;
  margin-top: 20px;
}

/* 议程相关样式 */
.agenda-actions {
  margin-bottom: 16px;
  display: flex;
  justify-content: flex-end;
}

.agenda-item {
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  margin-bottom: 16px;
  overflow: hidden;
}

.agenda-content .agenda-actions {
  margin-top: 12px;
  margin-bottom: 0;
  justify-content: flex-start;
  gap: 8px;
}

.agenda-action-btn {
  padding: 4px 8px;
  font-size: 12px;
  color: #666;
  background: none;
  border: none;
  cursor: pointer;
  transition: color 0.3s;
}

.agenda-action-btn:hover {
  color: #007bff;
}

.agenda-action-btn.delete:hover {
  color: #dc3545;
}

.sub-agenda-list {
  padding: 10px 0;
  margin: 15px 0;
  border-top: 1px dashed #e9ecef;
}

.sub-agenda-title {
  margin: 0 0 10px 0;
  font-size: 16px;
  color: #495057;
}

.sub-agenda-item {
  background: #f8f9fa;
  border-radius: 6px;
  box-shadow: 0 1px 2px rgba(0,0,0,0.05);
  margin-bottom: 10px;
  overflow: hidden;
}

.sub-agenda-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 8px 12px;
  background: #edf2f7;
  border-bottom: 1px solid #e2e8f0;
}

.sub-agenda-title {
  font-weight: bold;
  color: #333;
  font-size: 14px;
}

.sub-agenda-content {
  padding: 10px;
}

.sub-agenda-content p {
  margin: 0 0 8px;
  color: #333;
  font-size: 14px;
}

/* 添加会议已完成提示样式 */
.meeting-status-notice {
  background-color: #f8f9fa;
  border-radius: 8px;
  padding: 12px 16px;
  margin-top: 16px;
  border-left: 4px solid #6c757d;
}

.meeting-status-notice p {
  margin: 0;
  color: #6c757d;
  font-size: 14px;
  text-align: center;
}

/* 禁用状态的按钮样式 */
button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.chat-input input:disabled {
  background-color: #f8f9fa;
  cursor: not-allowed;
}

.header-actions {
  display: flex;
  gap: 10px;
}

.generate-btn, .upload-btn {
  background-color: #28a745;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
}

.generate-btn:hover, .upload-btn:hover {
  background-color: #218838;
}

.edit-btn {
  background-color: #ffc107;
  color: #212529;
  border: none;
  padding: 6px 12px;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
}

.edit-btn:hover {
  background-color: #e0a800;
}

.file-upload-container {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-top: 8px;
}

.file-select-btn {
  background-color: #6c757d;
  color: white;
  border: none;
  padding: 6px 12px;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
}

.file-hint {
  color: #6c757d;
  font-size: 14px;
}

.file-select-btn:hover {
  background-color: #5a6268;
}

.pdf-preview-modal {
  z-index: 1050;
}

.pdf-preview-content {
  width: 90%;
  max-width: 1000px;
  height: 90vh;
}

.pdf-preview-body {
  height: calc(100% - 120px);
  padding: 0;
}

.pdf-viewer {
  width: 100%;
  height: 100%;
  border: none;
}

/* 状态标签样式 */
.status-badge {
  display: inline-block;
  padding: 2px 8px;
  border-radius: 12px;
  font-size: 12px;
  font-weight: 500;
}

.status-1, .status-pending {
  background-color: #e9ecef;
  color: #495057;
}

.status-2, .status-ongoing {
  background-color: #2ecc71;
  color: white;
}

.status-3, .status-completed {
  background-color: #3498db;
  color: white;
}

.status-4, .status-canceled, .status-skipped {
  background-color: #e74c3c;
  color: white;
}

/* 会议状态样式 */
.meeting-status {
  font-size: 14px;
  padding: 4px 10px;
  border-radius: 12px;
  margin-right: 10px;
  font-weight: bold;
}

.status-pending {
  background-color: #e6f7ff;
  color: #1890ff;
}

.status-in-progress {
  background-color: #d9f7be;
  color: #52c41a;
}

.status-completed {
  background-color: #f5f5f5;
  color: #8c8c8c;
}

.status-canceled {
  background-color: #fff1f0;
  color: #ff4d4f;
}

.meeting-status-notice {
  margin-top: 15px;
  padding: 10px;
  background-color: #fffbe6;
  border: 1px solid #ffe58f;
  border-radius: 4px;
  font-size: 14px;
  color: #d48806;
}
</style>

<script>
import { 
  getMeetingDetailAPI, 
  getMeetingAgendasAPI,
  getMeetingFilesAPI, 
  getMeetingRecordingsAPI, 
  getMeetingMessagesAPI, 
  sendMeetingChatMessage,
  uploadFile,
  uploadRecording
} from '@/api/meeting.js';

export default {
  data() {
    return {
      meetingId: '',
      meeting: {
        id: '',
        title: '',
        status: '',
        startTime: '',
        endTime: '',
        organizer: { name: '' },
        type: ''
      },
      currentTab: 'chat',
      tabs: [
        { id: 'chat', name: '聊天室' },
        { id: 'agenda', name: '议题' },
        { id: 'file', name: '文件' },
        { id: 'recording', name: '录音' },
        { id: 'minutes', name: '纪要' }
      ],
      messages: [],
      newMessage: '',
      agendaItems: [],
      fileItems: [],
      recordingItems: [],
      minutesItems: [],
      currentUser: '当前用户',
      isCreator: true,
      showUploadModal: false,
      showUploadFileModal: false,
      showAddAgendaModal: false,
      showPdfPreviewModal: false,
      showAddMinutesModal: false,
      showGenerateMinutesModal: false,
      showUploadMinutesModal: false,
      uploadRecordingModal: false,
      currentPreviewFile: null,
      pdfPreviewUrl: '',
      uploadForm: {
        fileName: '',
        fileType: 'doc',
        filePath: '',
        selectedFileName: '',
        agendaId: ''
      },
      uploadFileOptions: [
        { label: 'Word文档', value: 'doc' },
        { label: 'PDF文档', value: 'pdf' },
        { label: 'Excel表格', value: 'xls' },
        { label: 'PPT演示文稿', value: 'ppt' },
        { label: '图片', value: 'image' },
        { label: '文本文件', value: 'txt' }
      ],
      // 录音相关
      isRecording: false,
      recordingStartTime: null,
      recordingDuration: '00:00',
      recordingTimer: null,
      // 纪要相关
      minutesForm: {
        title: '',
        content: ''
      },
      agendaForm: {
        title: '',
        description: '',
        duration: 15,
        owner: '',
        parentId: null
      },
      // ... existing code ...
    }
  },
  // ... existing code ...
  methods: {
    // ... existing methods ...
    // 录音相关方法
    startRecording() {
      console.log('开始录音');
      
      // 检查会议状态，只有在会议进行中才能录音
      if (!this.isMeetingActive) {
        uni.showToast({
          title: '只有在会议进行中才能录音',
          icon: 'none'
        });
        return;
      }
      
      // 显示录音中的状态
      this.isRecording = true;
      this.recordingStartTime = new Date();
      
      // 初始化录音时长计时器
      this.updateRecordingDuration();
      this.recordingTimer = setInterval(() => {
        this.updateRecordingDuration();
      }, 1000);
      
      // 显示开始录音的提示
      uni.showToast({
        title: '开始录音',
        icon: 'success'
      });
      
      // 添加系统消息
      this.addSystemMessage('开始录音');
    },

    // 停止录音
    stopRecording() {
      console.log('停止录音');
      
      // 停止计时器
      if (this.recordingTimer) {
        clearInterval(this.recordingTimer);
        this.recordingTimer = null;
      }
      
      // 更新状态
      this.isRecording = false;
      
      // 显示停止录音的提示
      uni.showToast({
        title: '已停止录音',
        icon: 'success'
      });
      
      // 添加系统消息
      this.addSystemMessage('结束录音');
      
      // 创建录音记录
      const recTime = new Date();
      
      // 计算录音时长
      const duration = Math.floor((recTime - this.recordingStartTime) / 1000);
      const minutes = Math.floor(duration / 60);
      const seconds = duration % 60;
      const formattedDuration = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
      
      // 创建录音记录对象
      const recordingData = {
        meetingId: this.meetingId,
        name: `会议录音 ${recTime.toLocaleTimeString()}`,
        duration: formattedDuration,
        createTime: recTime.toLocaleString('zh-CN'),
        size: Math.floor(Math.random() * 5000000) + 1000000, // 模拟文件大小 1MB~6MB
        url: 'mock://recordings/' + Date.now(),
        creator: this.currentUser
      };
      
      // 使用API保存录音记录
      this.saveRecording(recordingData);
    },

    // 切换录音状态
    toggleRecording() {
      if (this.isRecording) {
        this.stopRecording();
      } else {
        this.startRecording();
      }
    },

    // 更新录音时长显示
    updateRecordingDuration() {
      if (!this.recordingStartTime) return;
      
      const now = new Date();
      const duration = Math.floor((now - this.recordingStartTime) / 1000);
      const minutes = Math.floor(duration / 60);
      const seconds = duration % 60;
      
      this.recordingDuration = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    },

    // 保存录音记录
    saveRecording(recordingData) {
      console.log('保存录音记录:', recordingData);
      
      // 显示加载提示
      uni.showLoading({
        title: '保存录音中...',
        mask: true
      });
      
      uploadRecording(this.meetingId, recordingData)
        .then(res => {
          console.log('保存录音结果:', res);
          
          uni.hideLoading();
          
          if (res.code === 200) {
            // 保存成功
            uni.showToast({
              title: '录音已保存',
              icon: 'success'
            });
            
            // 重新加载录音列表
            this.loadRecordingItems();
          } else {
            // 保存失败
            uni.showToast({
              title: res.message || '保存录音失败',
              icon: 'none'
            });
          }
        })
        .catch(err => {
          uni.hideLoading();
          console.error('保存录音异常:', err);
          uni.showToast({
            title: '保存录音失败',
            icon: 'none'
          });
        });
    },

    // 加载录音列表
    loadRecordingItems() {
      console.log('加载会议录音:', this.meetingId);
      
      // 调用API获取录音列表
      getMeetingRecordingsAPI(this.meetingId)
        .then(res => {
          console.log('录音列表API返回:', res);
          
          if (res.code === 200 && res.data) {
            // 处理录音列表数据
            if (Array.isArray(res.data)) {
              this.recordingItems = res.data;
            } else if (res.data.list && Array.isArray(res.data.list)) {
              this.recordingItems = res.data.list;
            } else {
              console.warn('录音数据格式不正确');
              this.recordingItems = [];
            }
          } else {
            console.error('获取录音列表失败:', res.message);
            this.loadTestRecordingItems();
          }
        })
        .catch(err => {
          console.error('获取录音列表错误:', err);
          this.loadTestRecordingItems();
        });
    },

    // 加载测试录音数据
    loadTestRecordingItems() {
      console.log('加载测试录音数据');
      
      this.recordingItems = [
        {
          id: '1',
          name: '会议开场讨论',
          duration: '15:30',
          createTime: '2023-05-20 09:15',
          size: 3072000,
          creator: '张三'
        },
        {
          id: '2',
          name: '技术方案讨论',
          duration: '28:45',
          createTime: '2023-05-20 09:45',
          size: 5120000,
          creator: '李四'
        },
        {
          id: '3',
          name: '项目进度汇报',
          duration: '10:20',
          createTime: '2023-05-20 10:30',
          size: 2048000,
          creator: '王五'
        }
      ];
    },

    // 播放录音
    playRecording(recording) {
      console.log('播放录音:', recording);
      
      // 使用uni-app的音频播放API
      const innerAudioContext = uni.createInnerAudioContext();
      innerAudioContext.autoplay = true;
      
      // 设置音频源
      if (recording.url) {
        innerAudioContext.src = recording.url;
      } else {
        // 测试环境使用模拟音频
        innerAudioContext.src = 'https://bjetxgzv.cdn.bspapp.com/VKCEYUGU-uni-app-doc/a876efc0-4f35-11eb-b680-7980c8a877b8.mp3';
      }
      
      // 播放开始事件
      innerAudioContext.onPlay(() => {
        console.log('开始播放录音');
        uni.showToast({
          title: '正在播放录音',
          icon: 'none',
          duration: 2000
        });
      });
      
      // 播放错误事件
      innerAudioContext.onError((res) => {
        console.error('播放录音失败:', res);
        uni.showToast({
          title: '播放录音失败',
          icon: 'none'
        });
      });
      
      // 播放结束事件
      innerAudioContext.onEnded(() => {
        console.log('录音播放结束');
        uni.showToast({
          title: '录音播放结束',
          icon: 'none'
        });
      });
    },

    // 下载录音
    downloadRecording(recording) {
      console.log('下载录音:', recording);
      
      // 显示加载提示
      uni.showLoading({
        title: '准备下载...',
        mask: true
      });
      
      // 调用API获取下载链接
      import { downloadRecording } from '@/api/meeting.js';
      
      downloadRecording(this.meetingId, recording.id)
        .then(res => {
          console.log('获取下载链接结果:', res);
          
          uni.hideLoading();
          
          if (res.code === 200 && res.data && res.data.url) {
            // 调用系统下载功能
            uni.downloadFile({
              url: res.data.url,
              success: (downloadRes) => {
                if (downloadRes.statusCode === 200) {
                  console.log('下载完成,临时路径:', downloadRes.tempFilePath);
                  
                  // 保存文件到系统
                  uni.saveFile({
                    tempFilePath: downloadRes.tempFilePath,
                    success: (saveRes) => {
                      console.log('保存文件成功:', saveRes.savedFilePath);
                      uni.showToast({
                        title: '下载完成',
                        icon: 'success'
                      });
                    },
                    fail: (err) => {
                      console.error('保存文件失败:', err);
                      uni.showToast({
                        title: '保存文件失败',
                        icon: 'none'
                      });
                    }
                  });
                } else {
                  console.error('下载失败,状态码:', downloadRes.statusCode);
                  uni.showToast({
                    title: '下载失败',
                    icon: 'none'
                  });
                }
              },
              fail: (err) => {
                console.error('下载文件失败:', err);
                uni.showToast({
                  title: '下载失败',
                  icon: 'none'
                });
              }
            });
          } else {
            uni.showToast({
              title: res.message || '获取下载链接失败',
              icon: 'none'
            });
          }
        })
        .catch(err => {
          uni.hideLoading();
          console.error('获取下载链接异常:', err);
          uni.showToast({
            title: '下载失败',
            icon: 'none'
          });
        });
    },

    // 删除录音
    deleteRecording(recordingId) {
      console.log('删除录音:', recordingId);
      
      // 确认是否删除
      uni.showModal({
        title: '确认删除',
        content: '确定要删除这个录音吗？',
        success: (res) => {
          if (res.confirm) {
            // 显示加载提示
            uni.showLoading({
              title: '删除中...',
              mask: true
            });
            
            // 调用API删除录音
            import { deleteRecording } from '@/api/meeting.js';
            
            deleteRecording(this.meetingId, recordingId)
              .then(res => {
                console.log('删除录音结果:', res);
                
                uni.hideLoading();
                
                if (res.code === 200) {
                  // 删除成功
                  uni.showToast({
                    title: '删除成功',
                    icon: 'success'
                  });
                  
                  // 重新加载录音列表
                  this.loadRecordingItems();
                  
                  // 添加系统消息
                  this.addSystemMessage(`${this.currentUser}删除了一条录音`);
                } else {
                  // 删除失败
                  uni.showToast({
                    title: res.message || '删除失败',
                    icon: 'none'
                  });
                }
              })
              .catch(err => {
                uni.hideLoading();
                console.error('删除录音异常:', err);
                uni.showToast({
                  title: '删除失败',
                  icon: 'none'
                });
              });
          }
        }
      });
    },

    // 准备上传文件
    chooseFile() {
      console.log('选择文件');
      
      // 使用uni-app的文件选择API
      uni.chooseFile({
        count: 1,
        success: (res) => {
          const file = res.tempFiles[0];
          console.log('选择的文件:', file);
          
          this.uploadForm.filePath = file.path;
          this.uploadForm.selectedFileName = file.name;
          this.uploadForm.size = file.size;
        },
        fail: (err) => {
          console.error('选择文件失败:', err);
          uni.showToast({
            title: '选择文件失败',
            icon: 'none'
          });
        }
      });
    },

    // 上传文件
    uploadFile() {
      console.log('上传文件:', this.uploadForm);
      
      if (!this.uploadForm.fileName || !this.uploadForm.filePath) {
        uni.showToast({
          title: '请选择文件并输入文件名称',
          icon: 'none'
        });
        return;
      }
      
      // 显示加载提示
      uni.showLoading({
        title: '上传中...',
        mask: true
      });
      
      // 准备文件数据
      const fileData = {
        name: this.uploadForm.fileName,
        type: this.uploadForm.fileType,
        size: this.uploadForm.size || 1024000,
        filePath: this.uploadForm.filePath,
        agendaId: this.uploadForm.agendaId || null
      };
      
      // 上传文件到会议
      uploadFile(this.meetingId, this.uploadForm.agendaId, fileData)
        .then(res => {
          console.log('文件上传结果:', res);
          
          uni.hideLoading();
          
          if (res.code === 200) {
            // 上传成功
            uni.showToast({
              title: '上传成功',
              icon: 'success'
            });
            
            // 清空表单
            this.uploadForm = {
              fileName: '',
              fileType: 'doc',
              filePath: '',
              selectedFileName: '',
              agendaId: ''
            };
            
            // 关闭弹窗
            this.showUploadFileModal = false;
            
            // 添加系统消息
            this.addSystemMessage(`${this.currentUser}上传了文件: ${fileData.name}`);
            
            // 重新加载文件列表
            this.loadFileItems();
          } else {
            // 上传失败
            uni.showToast({
              title: res.message || '上传失败',
              icon: 'none'
            });
          }
        })
        .catch(err => {
          uni.hideLoading();
          console.error('文件上传异常:', err);
          uni.showToast({
            title: '上传文件失败',
            icon: 'none'
          });
        });
    },

    // 加载文件列表
    loadFileItems() {
      console.log('加载会议文件:', this.meetingId);
      
      // 调用API获取文件列表
      getMeetingFilesAPI(this.meetingId)
        .then(res => {
          console.log('文件列表API返回:', res);
          
          if (res.code === 200 && res.data) {
            // 处理文件列表数据
            if (Array.isArray(res.data)) {
              this.fileItems = res.data;
            } else if (res.data.list && Array.isArray(res.data.list)) {
              this.fileItems = res.data.list;
            } else {
              console.warn('文件数据格式不正确');
              this.fileItems = [];
            }
          } else {
            console.error('获取文件列表失败:', res.message);
            this.loadTestFileItems();
          }
        })
        .catch(err => {
          console.error('获取文件列表错误:', err);
          this.loadTestFileItems();
        });
    },

    // 加载测试文件数据
    loadTestFileItems() {
      console.log('加载测试文件数据');
      
      this.fileItems = [
        {
          id: '1',
          name: '项目需求文档.pdf',
          type: 'pdf',
          size: 2048000,
          uploadTime: '2023-05-20 10:15',
          uploader: '张三',
          agendaId: '1'
        },
        {
          id: '2',
          name: '技术方案.docx',
          type: 'doc',
          size: 1536000,
          uploadTime: '2023-05-20 10:30',
          uploader: '李四',
          agendaId: '2'
        },
        {
          id: '3',
          name: '前端开发计划.pptx',
          type: 'ppt',
          size: 3072000,
          uploadTime: '2023-05-20 10:45',
          uploader: '王五',
          agendaId: '1'
        }
      ];
    },

    // 加载聊天消息
    loadChatMessages() {
      console.log('加载会议聊天消息:', this.meetingId);
      
      // 调用API获取消息列表
      getMeetingMessagesAPI(this.meetingId)
        .then(res => {
          console.log('消息列表API返回:', res);
          
          if (res.code === 200 && res.data) {
            // 处理消息列表数据
            if (Array.isArray(res.data)) {
              this.messages = res.data.map(msg => this.formatChatMessage(msg));
            } else if (res.data.list && Array.isArray(res.data.list)) {
              this.messages = res.data.list.map(msg => this.formatChatMessage(msg));
            } else {
              console.warn('消息数据格式不正确');
              this.messages = [];
            }
            
            // 滚动到底部
            this.$nextTick(() => {
              this.scrollToBottom();
            });
          } else {
            console.error('获取消息列表失败:', res.message);
            this.loadTestChatMessages();
          }
        })
        .catch(err => {
          console.error('获取消息列表错误:', err);
          this.loadTestChatMessages();
        });
    },

    // 格式化聊天消息对象
    formatChatMessage(msg) {
      return {
        id: msg.id,
        sender: msg.senderName || msg.sender || '未知用户',
        content: msg.content || '',
        time: msg.createTime ? this.formatMessageTime(msg.createTime) : new Date().toLocaleTimeString('zh-CN'),
        isSystem: msg.isSystem || false
      };
    },

    // 格式化消息时间
    formatMessageTime(time) {
      if (!time) return '';
      
      // 处理动态时间标记
      if (time === 'dynamic_date_yesterday') {
        const yesterday = new Date();
        yesterday.setDate(yesterday.getDate() - 1);
        return yesterday.toLocaleTimeString('zh-CN');
      }
      
      if (time === 'dynamic_date_today') {
        return new Date().toLocaleTimeString('zh-CN');
      }
      
      // 尝试将时间字符串转换为日期对象
      try {
        const date = new Date(time);
        if (!isNaN(date.getTime())) {
          return date.toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' });
        }
      } catch (e) {
        console.warn('无法解析时间:', time, e);
      }
      
      // 如果包含时间格式，尝试提取时分
      if (typeof time === 'string' && time.includes(':')) {
        const timeParts = time.split(' ');
        if (timeParts.length > 1 && timeParts[1].includes(':')) {
          return timeParts[1].substring(0, 5); // 提取HH:MM部分
        }
        return time;
      }
      
      return time;
    },

    // 加载测试聊天消息数据
    loadTestChatMessages() {
      console.log('加载测试聊天消息数据');
      
      this.messages = [
        {
          id: '1',
          sender: '系统',
          content: '会议已开始，请各位参会人员就位',
          time: '09:00',
          isSystem: true
        },
        {
          id: '2',
          sender: '张三',
          content: '大家好，我们开始讨论今天的议题',
          time: '09:01',
          isSystem: false
        },
        {
          id: '3',
          sender: '李四',
          content: '好的，首先是关于项目进度的问题',
          time: '09:02',
          isSystem: false
        },
        {
          id: '4',
          sender: '王五',
          content: '我这边准备了一份进度报告，稍后分享给大家',
          time: '09:04',
          isSystem: false
        },
        {
          id: '5',
          sender: '系统',
          content: '王五分享了文件：项目进度报告.pdf',
          time: '09:05',
          isSystem: true
        }
      ];
      
      // 滚动到底部
      this.$nextTick(() => {
        this.scrollToBottom();
      });
    },

    // 发送消息
    sendMessage() {
      if (!this.newMessage.trim() || !this.isMeetingActive) return;
      
      console.log('发送消息:', this.newMessage);
      
      // 创建本地消息对象并添加到消息列表
      const localMessage = {
        id: 'temp_' + Date.now(),
        sender: this.currentUser,
        content: this.newMessage.trim(),
        time: new Date().toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' }),
        isSystem: false
      };
      
      // 清空输入框
      const message = this.newMessage.trim();
      this.newMessage = '';
      
      // 添加本地消息
      this.messages.push(localMessage);
      
      // 滚动到底部
      this.$nextTick(() => {
        this.scrollToBottom();
      });
      
      // 发送消息到服务器
      sendMeetingChatMessage(this.meetingId, message, {
        senderId: this.userId,
        senderName: this.currentUser
      })
        .then(res => {
          console.log('发送消息结果:', res);
          
          if (res.code !== 200) {
            // 发送失败
            console.error('发送消息失败:', res.message);
            uni.showToast({
              title: '发送失败',
              icon: 'none'
            });
          }
        })
        .catch(err => {
          console.error('发送消息异常:', err);
          uni.showToast({
            title: '发送失败',
            icon: 'none'
          });
        });
    },

    // 添加系统消息
    addSystemMessage(content) {
      if (!content) return;
      
      const systemMessage = {
        id: 'system_' + Date.now(),
        sender: '系统',
        content: content,
        time: new Date().toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' }),
        isSystem: true
      };
      
      this.messages.push(systemMessage);
      
      // 滚动到底部
      this.$nextTick(() => {
        this.scrollToBottom();
      });
    },

    // 滚动聊天区域到底部
    scrollToBottom() {
      const chatMessagesElement = this.$refs.chatMessages;
      if (chatMessagesElement) {
        chatMessagesElement.scrollTop = chatMessagesElement.scrollHeight;
      }
    },
  },
  // 在mounted生命周期中初始化会议数据
  mounted() {
    console.log('会议室页面初始化');
    
    // 初始化会议数据
    this.initMeetingData();
    
    // 加载会议相关数据
    this.loadMeetingRelatedData();
  },

  // 在onLoad生命周期中获取会议ID
  onLoad(options) {
    console.log('会议室页面加载参数:', options);
    
    // 获取会议ID
    this.meetingId = options.id || '';
    
    if (!this.meetingId) {
      console.error('缺少会议ID参数');
      uni.showToast({
        title: '参数错误',
        icon: 'none'
      });
      
      // 延迟返回上一页
      setTimeout(() => {
        uni.navigateBack();
      }, 1500);
      return;
    }
    
    console.log('会议ID:', this.meetingId);
    
    // 加载会议数据
    this.initMeetingData();
  },

  // 初始化会议数据
  initMeetingData() {
    if (!this.meetingId) {
      console.error('会议ID不能为空');
      return;
    }
    
    console.log('初始化会议数据:', this.meetingId);
    
    // 显示加载中
    uni.showLoading({
      title: '加载中...'
    });
    
    // 获取会议详情
    getMeetingDetailAPI(this.meetingId)
      .then(res => {
        console.log('会议详情API返回:', res);
        
        if (res.code === 200 && res.data) {
          // 设置会议数据
          this.meeting = res.data;
          
          // 设置页面标题
          uni.setNavigationBarTitle({
            title: this.meeting.title || '会议详情'
          });
          
          // 检查会议状态并更新UI状态
          this.updateMeetingStatus();
          
          // 检查是否是会议创建者
          this.checkIsCreator();
          
          // 加载会议相关数据
          this.loadMeetingRelatedData();
        } else {
          console.error('获取会议详情失败:', res.message);
          this.loadTestMeetingData();
        }
      })
      .catch(err => {
        console.error('获取会议详情异常:', err);
        this.loadTestMeetingData();
      })
      .finally(() => {
        uni.hideLoading();
      });
  },

  // 加载会议相关数据
  loadMeetingRelatedData() {
    console.log('加载会议相关数据');
    
    // 同步加载所有相关数据
    Promise.all([
      this.loadChatMessages(),
      this.loadAgendaItems(),
      this.loadFileItems(),
      this.loadRecordingItems()
    ])
    .then(() => {
      console.log('所有会议相关数据加载完成');
    })
    .catch(err => {
      console.error('加载会议相关数据异常:', err);
    });
  },

  // 加载测试会议数据
  loadTestMeetingData() {
    console.log('加载测试会议数据');
    
    this.meeting = {
      id: this.meetingId,
      title: '项目进度例会',
      status: 'in-progress',
      startTime: '2023-05-20 09:00',
      endTime: '2023-05-20 10:30',
      location: '线上会议',
      department: '研发部',
      type: '项目会议',
      organizer: { id: '1', name: '张三' }
    };
    
    // 设置页面标题
    uni.setNavigationBarTitle({
      title: this.meeting.title
    });
    
    // 加载相关测试数据
    this.loadTestChatMessages();
    this.loadTestAgendaItems();
    this.loadTestFileItems();
    this.loadTestRecordingItems();
  },

  // 检查当前用户是否是会议创建者
  checkIsCreator() {
    if (!this.meeting || !this.meeting.organizer) {
      this.isCreator = false;
      return;
    }
    
    // 在实际环境中应该获取当前登录用户信息并比较
    // 这里只是根据预设的currentUser进行简单比较
    this.isCreator = this.meeting.organizer.name === this.currentUser;
    console.log('当前用户是否是会议创建者:', this.isCreator);
  }
}
</script>

<style>
/* 会议室样式 */
.meeting-container {
  width: 100%;
  height: 100vh;
  display: flex;
  flex-direction: column;
  background-color: #f8f9fa;
}
</style>
</script> 